**********    DAWING W/GRAPH   **************

Drawing a step dataset onto graph:
   i.e. where all lines are constant horizontal and values change by jumping
Use graph.drawStep(historyDataSet, curentData, styleClassName);
   historyDataSet -> 2Darray of all steps in history. each entry in first array looks like [startTime, endTime, price]
   curentData     -> curent status of the step graph. looks like: [startTime, price] or Null if currently graph is empty.
   styleClassName -> string identifier for the css class that should be used to draw lines of this graph.


**********  MESSAGE STRUCTURE  **************

General Structure:
   Message {
      protocol    -> string: Gives general idea about type of message and what protocol this message should use. Three types:
                        - "OUCH" Message sent to enter buy/sell offer or change market in some way.
                        - "ITCH" Message sent to inform about market state.
                        - "USER" Message generated by user interacting with UI.
                        - "SYNC_FP" Message sent by player on FPC
      delay       -> boolean: for messages going from subject through group manager only. Indicates if this message should be delayed.
      timestamp   -> int: time at which message was created.
      msgType     -> string: indicates what type of message this is. Example: "ESELL" = enter sell message
      msgData     -> array: Various information included with message, content varies by message type.
   }

   Outside investor id is 0


Specific Message Structures:

   OUCH Messages:
      Enter Buy Order:
         protocol    -> "OUCH"
         msgType     -> "EBUY"
         msgData     -> [buyer-id, price]

      Enter Sell Order:
         protocol    -> "OUCH"
         msgType     -> "ESELL"
         msgData     -> [seller-id, price]

      Remove Buy Order:
         protocol    -> "OUCH"
         msgType     -> "RBUY"
         msgData     -> [buyer-id]

      Remove Sell Order:
         protocol    -> "OUCH"
         msgType     -> "RSELL"
         msgData     -> [seller-id]

      Update Buy Order:
         protocol    -> "OUCH"
         msgType     -> "UBUY"
         msgData     -> [buyer-id, price]

      Update Sell Order:
         protocol    -> "OUCH"
         msgType     -> "USELL"
         msgData     -> [seller-id, price]



   ITCH Messages:
      Fundamental Price Change:
         protocol    -> "ITCH"
         msgType     -> "FPC"
         msgData     -> [change-time, new-price, price-change-index]

      Confirm that Buy Order was Entered:
         protocol    -> "ITCH"
         msgType     -> "C_EBUY"
         msgData     -> [buyer-id, price, time-order-entered]

      Confirm that Sell Order was Entered:
         protocol    -> "ITCH"
         msgType     -> "C_ESELL"
         msgData     -> [seller-id, price, time-order-entered]

      Confirm that Buy Order was Removed:
         protocol    -> "ITCH"
         msgType     -> "C_RBUY"
         msgData     -> [buyer-id, time-order-entered]

      Confirm that Sell Order was Removed:
         protocol    -> "ITCH"
         msgType     -> "C_RSELL"
         msgData     -> [seller-id, time-order-entered]

      Confirm that Buy Order was Updated:
         protocol    -> "ITCH"
         msgType     -> "C_UBUY"
         msgData     -> [buyer-id, price, time-order-updated]

      Confirm that Sell Order was Updated:
         protocol    -> "ITCH"
         msgType     -> "C_USELL"
         msgData     -> [seller-id, price, time-order-updated]

      Confirm that Transaction has taken place:
         protocol    -> "ITCH"
         msgType     -> "C_TRA"
         msgData     -> [time-stamp, buyer-id, seller-id, price]



   USER Messages:
      Round Start Message:
         protocol    -> "USER"
         msgType     -> "START"
         msgData     -> [start-time, initial-fundamental-price]

      User Enter Market:
         protocol    -> "USER"
         msgType     -> "UENTM"
         msgData     -> -1

      User Exit Market:
         protocol    -> "USER"
         msgType     -> "UEXTM"
         msgData     -> -1

      User Update Spread:
         protocol    -> "USER"
         msgType     -> "UUSPR"
         msgData     -> [new-spread-value]



   SYNC_FP Messges:
         Out of Market:
            protocol    -> "SYNC_FP"
            msgType     -> "NONE"
            msgData     -> [uid, speed, price-change-index]

         Update Offers:
            protocol    -> "SYNC_FP"
            msgType     -> "UOFFERS"
            msgData     -> [uid, speed, price-change-index, spread]

         Snipe:
            protocol    -> "SYNC_FP"
            msgType     -> "SNIPE"
            msgData     -> [uid, speed, price-change-index]
